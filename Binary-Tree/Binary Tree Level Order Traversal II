/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
 
 
public class Solution {
    /*
    Given a binary tree, return the bottom-up level order traversal of its nodes' values. 
    (ie, from left to right, level by level from leaf to root).
    Given binary tree {3,9,20,#,#,15,7},

    3
   / \
  9  20
    /  \
   15   7
 

return its bottom-up level order traversal as:

[
  [15,7],
  [9,20],
  [3]
]
    */
    
    /**
     * @param root: The root of binary tree.
     * @return: buttom-up level order a list of lists of integer
     */
    public ArrayList<ArrayList<Integer>> levelOrderBottom(TreeNode root) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        if(root == null) return result;
        
        ArrayList<TreeNode> cur = new ArrayList<TreeNode>();
        cur.add(root);
        
        while(cur.size() > 0){
            ArrayList<TreeNode> next = new ArrayList<TreeNode>();
            ArrayList<Integer> l = new ArrayList<Integer>();
            for(TreeNode t:cur){
                l.add(t.val);
                if(t.left!=null)
                    next.add(t.left);
                if(t.right!=null)
                    next.add(t.right);
            }
            result.add(0,l);
            cur = next;
        }
        return result;
    }
}
