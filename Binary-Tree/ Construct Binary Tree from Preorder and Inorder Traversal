/*
Given preorder and inorder traversal of a tree, construct the binary tree
 Notice

You may assume that duplicates do not exist in the tree.

Given in-order [1,2,3] and pre-order [2,1,3], return a tree:

  2
 / \
1   3
*/

/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
 
 
public class Solution {
    /**
     *@param preorder : A list of integers that preorder traversal of a tree
     *@param inorder : A list of integers that inorder traversal of a tree
     *@return : Root of a tree
     */
    private int index = -1;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder == null || inorder == null) return null;
        else if(preorder.length != inorder.length) return null;
        index = 0;
        Map<Integer, Integer> inMap = new HashMap<Integer, Integer>();
        for(int i=0; i<inorder.length; i++){
            inMap.put(inorder[i], i);
        }
        return buildTreeH(preorder, inorder, 0, inorder.length-1, inMap);
    }
    
    public TreeNode buildTreeH(int[] preorder, int[] inorder, int s, int e, Map<Integer, Integer> inMap) {
        if(s>e) return null;
        
        int cur = preorder[index++];
        int inIndex = inMap.get(cur);
        
        TreeNode left = buildTreeH(preorder, inorder, s, inIndex-1, inMap);
        TreeNode right = buildTreeH(preorder, inorder, inIndex+1, e, inMap);
        TreeNode r = new TreeNode(cur);
        r.left  = left;
        r.right = right;
        return r;
    }
}
