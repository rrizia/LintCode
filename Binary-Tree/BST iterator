/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 * Example of iterate a tree:
 * BSTIterator iterator = new BSTIterator(root);
 * while (iterator.hasNext()) {
 *    TreeNode node = iterator.next();
 *    do something for node
 * } 
 */
public class BSTIterator {
    //@param root: The root of binary tree.
    private Stack<TreeNode> st;
    private TreeNode r = null ;
    
    public BSTIterator(TreeNode root) {
        st = new Stack<TreeNode>();
        this.r = root;
        TreeNode cur = this.r;
        
        while(cur!=null){
            st.push(cur);
            cur = cur.left;
        }
    }

    //@return: True if there has next node, or false
    public boolean hasNext() {
        return !st.isEmpty();
    }
    
    //@return: return next node
    public TreeNode next() {
        TreeNode top = st.pop();
        if(top.right!=null){
            TreeNode cur = top.right;
            while(cur!=null){
                st.push(cur);
                cur = cur.left;
            }
        }
        return top;
    }
}
