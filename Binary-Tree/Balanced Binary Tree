/*
Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree in which 
the depth of the two subtrees of every node never differ by more than 1.
Given binary tree A={3,9,20,#,#,15,7}, B={3,#,20,15,7}

A)  3            B)    3 
   / \                  \
  9  20                 20
    /  \                / \
   15   7              15  7
The binary tree A is a height-balanced binary tree, but B is not.
*/

/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: True if this Binary tree is Balanced, or false.
     */
    public boolean isBalanced(TreeNode root) {
        if(root == null) return true;
        if(checkHeight(root) == -1)
            return false;
        return true;
    }
    
    public int checkHeight(TreeNode root){
        if(root == null) return 0;
        int lH = checkHeight(root.left);
        if(lH == -1)
            return lH;
        int rH = checkHeight(root.right);
        if(rH == -1)
            return rH;
        int diff = Math.abs(lH - rH);
        if(diff > 1)
            return -1;
        else
            return 1+Math.max(lH, rH);
    }
}
