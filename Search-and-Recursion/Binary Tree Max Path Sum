/*
Given a binary tree, find the maximum path sum.

The path may start and end at any node in the tree.

Given the below binary tree:

  1
 / \
2   3
return 6.
*/

/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: An integer.
     */
    public int maxPathSum(TreeNode root) {
        if(root == null) return 0;
        int[] max = new int[1];
        max[0] = Integer.MIN_VALUE;
        maxPathSumH(root, max);
        return max[0];
    }
    
    public int maxPathSumH(TreeNode root, int[] max){
        if(root == null) return 0;
        int lSum = maxPathSumH(root.left, max);
        int rSum = maxPathSumH(root.right, max);
        int curMax = Math.max(Math.max(lSum+root.val, rSum+root.val), root.val);
        max[0] = Math.max(Math.max(curMax, lSum+root.val+rSum), max[0]);
        return curMax;
    }
}
