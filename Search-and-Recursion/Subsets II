class Solution {
    /**
     * @param S: A set of numbers.
     * @return: A list of lists. All valid subsets.
     */
    public ArrayList<ArrayList<Integer>> subsetsWithDup(ArrayList<Integer> S) {
        if(S == null || S.size() == 0) return new ArrayList<ArrayList<Integer>>();
        Collections.sort(S);
        ArrayList<ArrayList<Integer>> result = subsetH(S, 0);
        HashSet<ArrayList<Integer>> set = new HashSet<ArrayList<Integer>>(result);
        result.clear();
        result.addAll(set);
        return result;
    }
    
    public ArrayList<ArrayList<Integer>> subsetH(ArrayList<Integer> S, int index){
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        if(index == S.size()-1){
            ArrayList<Integer> l1 = new ArrayList<Integer>();
            ArrayList<Integer> l2 = new ArrayList<Integer>();
            l2.add(S.get(index));
            result.add(l1);
            result.add(l2);
        }else{
            int cur = S.get(index);
            ArrayList<ArrayList<Integer>> rest = subsetH(S, index+1);
            for(ArrayList<Integer> l: rest){
                ArrayList<Integer> t = (ArrayList<Integer>) l.clone();
                t.add(0,cur);
                result.add(l);
                result.add(t);
            }
        }
        return result;
    }
}
