/*
Given "23"

Return ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"]
*/
public class Solution {
    /**
     * @param digits A digital string
     * @return all posible letter combinations
     */
    public ArrayList<String> letterCombinations(String s) {
        ArrayList<String> result = new ArrayList<String>();
        if(s == null || s.length() == 0) return result;
        else if(s.length() == 1){
            String str = getCharStr(s.charAt(0));
            for(int i = 0; i<str.length(); i++){
                result.add(str.charAt(i)+"");
            }
        }else{
            char cur = s.charAt(0);
            String rest = s.substring(1);
            String str = getCharStr(cur);
            
            ArrayList<String> others = letterCombinations(rest);
            for(String temp: others){
                for(int i = 0; i<str.length(); i++){
                    result.add(str.charAt(i)+temp);
                }
            }
        }
        Collections.sort(result);
        return result;
    }
    
    public String getCharStr(char c){
        switch(c){
            case '0': return "0";
            case '1': return "1";
            case '2': return "abc";
            case '3': return "def";
            case '4': return "ghi";
            case '5': return "jkl";
            case '6': return "mno";
            case '7': return "pqrs";
            case '8': return "tuv";
            case '9': return "wxyz";
            default: return "";
        }
    }
}
