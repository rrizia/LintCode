/*
Print numbers from 1 to the largest number with N digits by recursion.

 Notice

It's pretty easy to do recursion like:

recursion(i) {
    if i > largest number:
        return
    results.add(i)
    recursion(i + 1)
}
however this cost a lot of recursion memory as the recursion depth maybe very large. 
Can you do it in another way to recursive with at most N depth?
Given N = 1, return [1,2,3,4,5,6,7,8,9].

Given N = 2, return [1,2,3,4,5,6,7,8,9,10,11,12,...,99].
*/

public class Solution {
    /**
     * @param n: An integer.
     * return : An array storing 1 to the largest number with n digits.
     */
    public List<Integer> numbersByRecursion(int n) {
        List<Integer> result = new ArrayList<Integer>();
        if(n>=0){
            numByBase(n, result);
        }
        return result;
    }
    
    public int numByBase(int n, List<Integer> result){
        if(n == 0)
            return 1;
        else{
            int base = numByBase(n-1, result);
            int size = result.size();
            for(int i = 1; i<=9; i++){
                int curBase = base*i;
                result.add(curBase);
                for(int j = 0; j<size; j++){
                    result.add(curBase+result.get(j));
                }
            }
            return base * 10;
        }
    }
}
