/*
Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.



For example, given candidate set 2,3,6,7 and target 7, 
A solution set is: 
[7] 
[2, 2, 3]
*/

public class Solution {
    /**
     * @param candidates: A list of integers
     * @param target:An integer
     * @return: A list of lists of integers
     */
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        if(candidates == null || candidates.length == 0 || target == 0) return new ArrayList<List<Integer>>();
        Arrays.sort(candidates);
        return combinationSum(candidates, target, 0);
    }
    
    public List<List<Integer>> combinationSum(int[] candidates, int target, int index){
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if(target <candidates[index] ) return result;
        else if(index == candidates.length-1){
            int cur = candidates[index];
            if(target%cur == 0){
                int count = target/cur;
                List<Integer> l = new ArrayList<Integer>(); 
                while(count>0){
                    l.add(cur);
                    count--;
                }
                result.add(l);
            }
        }else{
            int cur = candidates[index];
            for(int i = 0; target - i*cur>=0; i++){
                int rem = target - i*cur;
                if(rem > 0){
                    List<List<Integer>> rest = combinationSum(candidates, rem, index+1);
                    if(rest.size() > 0){
                        if(i > 0){
                            for(List<Integer> l : rest){
                                int count = i;
                                while(count>0){
                                    l.add(0,cur);
                                    count--;
                                }
                                result.add(l);
                            }
                        }else{
                            result.addAll(rest);
                        }
                    }
                }else{
                    List<Integer> l = new ArrayList<Integer>(); 
                    int count = i;
                    while(count>0){
                        l.add(cur);
                        count--;
                    }
                    result.add(l);
                }
            }
        }
        return result;
    }
}
