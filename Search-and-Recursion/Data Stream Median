public class Solution {
    
    class maxHeapComparator implements Comparator<Integer>{
        public int compare(Integer n1, Integer n2){
            return n2-n1;
        }
    }

    class minHeapComparator implements Comparator<Integer>{
        public int compare(Integer n1, Integer n2){
            return n1-n2;
        }
    }
    PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>(100, new maxHeapComparator());
    PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>(100, new minHeapComparator());
    
    /**
     * @param nums: A list of integers.
     * @return: the median of numbers
     */
    public int[] medianII(int[] nums) {
        if(nums == null) return null;
        int l = nums.length;
        int[] result = new int[l];
        
        for(int i = 0; i<l; i++){
            addNum(nums[i]);
            result[i] = getMedian();
        }
        return result;
    }
    
    public void addNum(int n){
        if(maxHeap.size() == minHeap.size()){
            if(minHeap.size()>0 && n > minHeap.peek()){
                maxHeap.offer(minHeap.poll());
                minHeap.offer(n);
            }else{
                maxHeap.offer(n);
            }
        }else{
            if(n<maxHeap.peek()){
                minHeap.offer(maxHeap.poll());
                maxHeap.offer(n);
            }else{
                minHeap.offer(n);
            }
        }
    }
    
    public int getMedian(){
        return maxHeap.peek();
    }
}
