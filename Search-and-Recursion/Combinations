/*
Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

For example,
If n = 4 and k = 2, a solution is:
[[2,4],[3,4],[2,3],[1,2],[1,3],[1,4]]
*/

public class Solution {
    /**
     * @param n: Given the range of numbers
     * @param k: Given the numbers of combinations
     * @return: All the combinations of k numbers out of 1..n
     */
    public List<List<Integer>> combine(int n, int k) {
		List<List<Integer>> result = new ArrayList<List<Integer>>();
		if(n<=0 || k <=0 ) return result;
		List<Integer> subList = new ArrayList<Integer>();
		int start = 1;
		int level = 0;
		combineHelper(start, level, n, k, subList, result);
		return result;
    }
    
    public void combineHelper(int start, int level, int n, int k, 
                              List<Integer> subList, List<List<Integer>> result){
        if(level == k){
            List<Integer> l = new ArrayList<Integer>(subList);
            result.add(l);
        }else{
            for(int i = start; i<=n; i++){
                subList.add(i);
                combineHelper(i+1, level+1, n, k, subList, result);
                subList.remove(subList.size()-1);
            }
        }
        
    }
}
