/*
Follow up for N-Queens problem.

Now, instead outputting board configurations, return the total number of distinct solutions.
*/

class Solution {
    /**
     * Calculate the total number of distinct N-Queen solutions.
     * @param n: The number of queens.
     * @return: The total number of distinct solutions.
     */
    public int totalNQueens(int n) {
        if(n<=0) return 0;
        else if(n==1) return 1;
        int[] columForRow = new int[n];
        return placeQueen(n, 0, columForRow);
    }
    
    public int placeQueen(int n, int row, int[] columForRow){
        if(n == row ){
            return 1;
        }else{
            int c = 0;
            for(int col = 0; col<n; col++){
                columForRow[row] = col;
                if(canPlace(columForRow, row)){
                    c+=placeQueen(n, row+1, columForRow);
                }
            }
            return c;
        }
    }
    
    public boolean canPlace(int[] columForRow, int row){
        for(int i = 0; i<row; i++){
            int diff = Math.abs(columForRow[row] - columForRow[i]);
            if(diff == 0 || diff == (row-i))
                return false;
        }
        return true;
    }
};

