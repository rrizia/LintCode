/*
Given a directed graph, design an algorithm to find out whether there is a route between two nodes.
Given graph:

A----->B----->C
 \     |
  \    |
   \   |
    \  v
     ->D----->E
for s = B and t = E, return true

for s = D and t = C, return false
*/

/**
 * Definition for Directed graph.
 * class DirectedGraphNode {
 *     int label;
 *     ArrayList<DirectedGraphNode> neighbors;
 *     DirectedGraphNode(int x) {
 *         label = x;
 *         neighbors = new ArrayList<DirectedGraphNode>();
 *     }
 * };
 */
public class Solution {
   /**
     * @param graph: A list of Directed graph node
     * @param s: the starting Directed graph node
     * @param t: the terminal Directed graph node
     * @return: a boolean value
     */
    public boolean hasRoute(ArrayList<DirectedGraphNode> graph, 
                            DirectedGraphNode s, DirectedGraphNode t) {
        if(s== null || t == null) return false;
        Set<DirectedGraphNode> visited = new HashSet<DirectedGraphNode>();
        LinkedList<DirectedGraphNode> q = new LinkedList<DirectedGraphNode>();
        q.offer(s);
        visited.add(s);
        
        while(!q.isEmpty()){
            DirectedGraphNode cur = q.poll();
            if(cur == t) return true;
            for(DirectedGraphNode d: cur.neighbors){
                if(!visited.contains(d)){
                    q.offer(d);
                    visited.add(d);
                }
            }
        }
        return false;
    }
}
