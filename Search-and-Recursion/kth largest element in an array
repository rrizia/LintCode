class Solution {
    /*
     * @param k : description of k
     * @param nums : array of nums
     * @return: description of return
     */
    /*
    kth largest element would be the (n-k)th element in the array
    s = 0;
    e = n-1;
    
    find a random index from [s, e]
    pick nums[index] as pivot
    partition based on pivot
    if pivot_index == k-1, pivot is the kth largest element
    else if(pivot_index > k-1) do [s, pivot_index-1]
    else do[pivot_index+1, e, k-(pivot_index+1)]
    */
    public int kthLargestElement(int k, int[] nums) {
        if(k<=0) return -1;
        else if(nums == null || nums.length == 0 || k>nums.length) return -1;
        int n = nums.length;
        return getKthLargest(nums, 0, n-1, n-k+1);
    }
    
    public int getKthLargest(int[] nums, int s, int e, int k){
        if(k<0 || s>e || k>nums.length || nums.length == 0) return -1;
        int index = getPivotIndex(s, e);
        int pivot = nums[index];
        int pivot_index = partition(nums, s, e, pivot);
        
        if(pivot_index == s+k-1) return pivot;
        else if(pivot_index > s+k-1)
            return getKthLargest(nums, s, pivot_index-1, k);
        else return getKthLargest(nums, pivot_index+1, e, s+k-(pivot_index+1));
    }
    
    public int getPivotIndex(int s, int e){
        return (int) (Math.random()*(e-s)+s);
    }
    
    public int partition(int[] nums, int s, int e, int pivot){
        if(s>e || s<0 || e>=nums.length) return -1;
        int l = s;
        int h = e;
        int equal = s;
        
        while(equal<=h){
            if(nums[equal] < pivot){
                int temp = nums[equal];
                nums[equal++] = nums[l];
                nums[l++] = temp;
            }else if(nums[equal] == pivot){
                equal++;
            }else{
                int temp = nums[equal];
                nums[equal] = nums[h];
                nums[h--] = temp;
            }
        }
        
        for(int i = s; i<=e; i++){
            if(nums[i] == pivot)
                return i;
        }
        return -1;
    }
};
