public class Solution {
    /**
     * @param nums: A list of integers
     * @return: A list of integers that's previous permuation
     */
    public ArrayList<Integer> previousPermuation(ArrayList<Integer> nums) {
		if(nums == null || nums.size() == 0) return nums;
        int firstInc = nums.size()-2;
        while(firstInc>=0 && nums.get(firstInc) <= nums.get(firstInc+1))
            firstInc--;
        
        //System.out.println(nums[firstDec]+" first Dec : "+firstDec);
        
        if(firstInc>=0){
            int largestSmaller = firstInc+1;
            while(largestSmaller<nums.size() && nums.get(largestSmaller) < nums.get(firstInc))
                largestSmaller++;
            
            largestSmaller--;
            //System.out.println(nums[smallestGreater]+" smallestGreater "+smallestGreater);
            
            int temp = nums.get(largestSmaller);
            nums.set(largestSmaller, nums.get(firstInc));
            nums.set(firstInc, temp);
            
            int i = firstInc+1;
            int j = nums.size()-1;
            while(i<j){
                temp = nums.get(i);
                nums.set(i++, nums.get(j));
                nums.set(j--, temp);
            }
        }else{
            int i = 0;
            int j = nums.size()-1;
            while(i<j){
                int temp = nums.get(i);
                nums.set(i++, nums.get(j));
                nums.set(j--, temp);
            }
        }
        return nums;
    }
}
