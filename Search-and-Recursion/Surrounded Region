public class Solution {
    /**
     * @param board a 2D board containing 'X' and 'O'
     * @return void
     */
    public void surroundedRegions(char[][] board) {
        if(board == null) return;
        int m = board.length;
        if(m == 0) return;
        int n = board[0].length;
        markFree(board, m, n);
        captureSurrounded(board, m, n);
    }
    
    public void markFree(char[][] board, int m, int n){
        for(int row = 0; row<m; row++){
            if(board[row][0] == 'O')
                dfs(board, m, n, row, 0);
        }
        
        for(int row = 0; row<m; row++){
            if(board[row][n-1] == 'O')
                dfs(board, m, n, row, n-1);
        }
        
        for(int col = 1; col<n-1; col++){
            if(board[0][col] == 'O')
                dfs(board, m, n, 0, col);
        }
        
        for(int col = 1; col<n-1; col++){
            if(board[m-1][col] == 'O')
                dfs(board, m, n, m-1, col);
        }
    }
    
    public void dfs(char[][] board, int m, int n, int row, int col){
        if(row<0 || row>=m || col<0 || col>=n || board[row][col] != 'O') return;
        board[row][col] = '#';
        dfs(board, m, n, row+1, col);
        dfs(board, m, n, row-1, col);
        dfs(board, m, n, row, col+1);
        dfs(board, m, n, row, col-1);
    }
    
    public void captureSurrounded(char[][] board, int m, int n){
        for(int i = 0; i<m; i++){
            for(int j = 0; j<n; j++){
                if(board[i][j] == 'O')
                    board[i][j] = 'X';
                else if(board[i][j] == '#')
                    board[i][j] = 'O';
            }
        }
    }
}
