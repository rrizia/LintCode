class Solution {
    /**
     * Get all distinct N-Queen solutions
     * @param n: The number of queens
     * @return: All distinct solutions
     * For example, A string '...Q' shows a queen on forth position
     */
    ArrayList<ArrayList<String>> solveNQueens(int n) {
        ArrayList<ArrayList<String>> result = new ArrayList<ArrayList<String>>();
        if(n<=0) return result;
        char[][] board = new char[n][n];
        for(int i = 0; i<n; i++){
            Arrays.fill(board[i], '.');
        }
        int[] columForRow = new int[n];
        placeQueen(board, columForRow, result, n, 0);
        return result;
    }
    
    public void placeQueen(char[][] board, int[] columForRow, ArrayList<ArrayList<String>> result, int n, int row ){
        if(row == n){
            ArrayList<String> l = new ArrayList<String>();
            for(int i = 0; i<n; i++){
                String cur = new String(board[i]);
                l.add(cur);
            }
            result.add(l);
        }else{
            for(int col = 0; col<n; col++){
                columForRow[row] = col;
                if(canPlace(columForRow, row)){
                    board[row][col] = 'Q';
                    placeQueen(board, columForRow, result, n, row+1);
                    board[row][col] = '.';
                }
            }
        }
    }
    
    public boolean canPlace(int[] columForRow, int row){
        for(int i = 0; i<row; i++){
            int diff = Math.abs(columForRow[row] - columForRow[i]);
            if(diff == 0 || diff == (row-i))
                return false;
        }
        return true;
    }
};
