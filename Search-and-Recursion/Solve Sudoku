public class Solution {
	public void solveSudoku(ArrayList<ArrayList<Character>> a) {
	    if(a == null || a.size() == 0) return;
	    char[][] board = new char[a.size()][a.get(0).size()];
	    for(int i = 0; i<a.size(); i++){
	        for(int j = 0; j<a.get(i).size() ; j++){
	            board[i][j] = a.get(i).get(j);
	        }
	    }
	    /*for(int i = 0; i<board.length; i++){
	        //System.out.println(Arrays.toString(board[i]));
	    }*/
	    solve(board);
	    a.clear();
	    for(int i = 0; i<board.length; i++){
	        ArrayList<Character> t = new ArrayList<Character>();
	        for(int j = 0; j<board[i].length; j++){
	            t.add(board[i][j]);
	        }
	        a.add(t);
	    }
	}
	
	int empx = -1;
	int empy = -1;
	
	public boolean solve(char[][] board){
	    boolean emp = getNextEmptyCell(board);
    	if(!emp) return true;
    	int x = empx;
    	int y = empy;
    	for(int i = 1; i<=9 ;i++){
    	    char c = (char)(i+'0');
    		if(isFeasible(x, y, c, board)){
    			board[x][y] = c;
    			if(solve(board)){
    				return true;
    			}
    			board[x][y] = '.';
    		}
    	}
    	return false;
	}
	
	public boolean getNextEmptyCell(char[][] board){
	    for(int i = 0; i<board.length; i++){
	        for(int j = 0; j<board.length; j++){
	            if(board[i][j] == '.'){
	                empx = i;
	                empy = j;
	                return true;
	            }
	        }
	    }
	    return false;
	}
	
	public boolean isFeasible(int x, int y, char c, char[][] board){
	    for(int i = 0; i<board.length; i++){
	        if(i != x && board[i][y] == c) return false;
	    }
	    
	    for(int j = 0; j<board.length; j++){
	        if(j!=y && board[x][j] == c) return false;
	    }
	    
	    int[] cellCode = getCellCode(x, y);
	    
	    int I = cellCode[0];
	    int J = cellCode[1];
	    for(int i = 0; i<3; i++){
	        for(int j = 0; j<3; j++){
	            if((I*3+i != x) && (J*3+j!= y) && board[I*3+i][J*3+j] == c) return false;
	        }
	    }
	    return true;
	}
	
	public int[] getCellCode(int x, int y){
	    int[] res = new int[2];
	    
	    for(int I = 0; I<3; I++){
	        for(int i = 0; i<3; i++){
	            if(I*3+i == x){
	                res[0] = I;
	                break;
	            }
	        }
	    }
	    
	    for(int J = 0; J<3; J++){
	        for(int j = 0; j<3; j++){
	            if(J*3+j == y){
	                res[1] = J;
	                break;
	            }
	        }
	    }
	    return res;
	}
}
