/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 */ 
public class Solution {
    /**
     * @param lists: a list of ListNode
     * @return: The head of one sorted list.
     */
    public ListNode mergeKLists(List<ListNode> lists) {  
        if(lists == null || lists.size() == 0) return null;
        ListNode nH = null;
        ListNode nT = null;
        
        PriorityQueue<HeapNode> minHeap = new PriorityQueue<HeapNode>(lists.size(), new MinHeapComparator());
        for(int i = 0; i<lists.size(); i++){
            if(lists.get(i) != null){
                ListNode l = lists.get(i);
                ListNode temp = l.next;
                l.next = null;
                HeapNode cur = new HeapNode(l, i);
                minHeap.offer(cur);
                lists.set(i, temp);
            }
        }
        
        while(!minHeap.isEmpty()){
            HeapNode cur = minHeap.poll();
            if(nH == null){
                nH = cur.n;
                nT = cur.n;
            }else{
                nT.next = cur.n;
                nT = cur.n;
            }
            
            int i = cur.idx;
            if(lists.get(i) != null){
                ListNode l = lists.get(i);
                ListNode temp = l.next;
                l.next = null;
                HeapNode h = new HeapNode(l, i);
                minHeap.offer(h);
                lists.set(i, temp);
            }
        }
        return nH;
    }
    
    class MinHeapComparator implements Comparator<HeapNode>{
        public int compare(HeapNode h1, HeapNode h2){
            return h1.n.val-h2.n.val;
        }
    }
    class HeapNode{
        ListNode n;
        int idx;
        
        public HeapNode(ListNode l, int i){
            n = l;
            idx = i;
        }
    }
}
