/*
Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Find the minimum element.

The array may contain duplicates.

Given [4,4,5,6,7,0,1,2] return 0
*/

public class Solution {
    /**
     * @param num: a rotated sorted array
     * @return: the minimum number in the array
     */
    public int findMin(int[] num) {
        if(num == null || num.length == 0) return -1;
        return findMin(num, 0, num.length-1);
    }
    
    public int findMin(int[] num, int s, int e){
        if(s == e) return num[s];
        int m = s+(e-s)/2;
        if(num[m] < num[e])
            return findMin(num, s, m);
        else if(num[m] > num[e])
            return findMin(num, m+1, e);
        else{
            return Math.min(findMin(num, s, m), findMin(num, m+1, e));
        }
    }
}
