/*
There is an integer array which has the following features:

The numbers in adjacent positions are different.
A[0] < A[1] && A[A.length - 2] > A[A.length - 1].
We define a position P is a peek if:

A[P] > A[P-1] && A[P] > A[P+1]
Find a peak element in this array. Return the index of the peak.

Given [1, 2, 1, 3, 4, 5, 7, 6]

Return index 1 (which is number 2) or 6 (which is number 7)
*/

class Solution {
    /**
     * @param A: An integers array.
     * @return: return any of peek positions.
     */
    public int findPeak(int[] A) {
        if(A == null || A.length == 0) return -1;
        else if(A.length == 1 || A[0] > A[1]) return 0;
        else if(A[A.length-1] > A[A.length-2]) return A.length-1;
        else{
            for(int i = 1; i<A.length-1; i++){
                if(A[i] > A[i-1] && A[i] > A[i+1])
                    return i;
            }
            return -1;
        }
    }
}
/*
    if(A[0] > A[1]) A[0] can be considered the pick element
    if(A[n-1] > A[n-2]) A[n-1] can be considered the pick element
    now if we find mid and see that A[mid] < A[mid-1], with the conditions s+1<e, this mean that A[mid-1] is at least greater that A[mid], so now if mid-1 == 0 , then we can know that this is peak. or else we can move to the left.
    the reason for moving left is A[mid-2] can either be greater than A[mid-1] or less
    if it is greater than we can proceed further to the left until index 0
    if it is less then mid-1 is the peak
    */
public int findPeak(int[] A) {
        int s = 0;
        int e = A.length-1;
        
        while(s+1<e){
            int m = s+(e-s)/2;
            if(A[m] < A[m-1]){
                e = m;
            }else if(A[m] < A[m+1])
                s = m;
            else return m;
        }
        return A[s]>=A[e]?s:e;
    }
