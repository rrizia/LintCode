/*
Follow up for "Search in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?

Write a function to determine if a given target is in the array.

*/

public class Solution {
    /** 
     * param A : an integer ratated sorted array and duplicates are allowed
     * param target :  an integer to be search
     * return : a boolean 
     */
    public boolean search(int[] A, int target) {
        if(A == null || A.length == 0) return false;
        return search(A, target, 0, A.length-1);
    }
    
    public boolean search(int[] A, int target, int s, int e){
        if(s>e) return false;
        int m = s+(e-s)/2;
        if(A[m] == target) return true;
        else if(A[s]<A[m]){
            if(target >=A[s] && target<A[m])
                return search(A, target, s, m-1);
            else return search(A, target, m+1, e);
        }else if(A[s]>A[m]){
            if(target> A[m] && target<=A[e])
                return search(A, target, m+1, e);
            else return search(A, target, s, m-1);
        }else if(A[s] == A[m]){
            if(A[m] != A[e])
                return search(A, target, m+1, e);
            else{
                return search(A, target, s, m-1) || search(A, target, m+1, e);
            }
        }else return false;
    }
}
