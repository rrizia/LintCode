/*
For a given sorted array (ascending order) and a target number, find the first index of this number in O(log n) time complexity.

If the target number does not exist in the array, return -1.

If the array is [1, 2, 3, 3, 4, 5, 10], for given target 3, return 2.
*/
class Solution {
    /**
     * @param nums: The integer array.
     * @param target: Target to find.
     * @return: The first position of target. Position starts from 0.
     */
    public int binarySearch(int[] nums, int target) {
        if(nums == null || nums.length == 0) return -1;
        int s = 0;
        int e = nums.length-1;
        int candidate = -1;
        while(s<=e){
            int m = s+(e-s)/2;
            if(nums[m] == target){
                candidate = m;
                e = m-1;
            }else if(nums[m] > target)
                e = m-1;
            else s = m+1;
        }
        return candidate;
    }
}
