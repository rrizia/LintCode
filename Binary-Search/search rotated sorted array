/*
Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.
For [4, 5, 1, 2, 3] and target=1, return 2.

For [4, 5, 1, 2, 3] and target=0, return -1.
*/
public class Solution {
    /** 
     *@param A : an integer rotated sorted array
     *@param target :  an integer to be searched
     *return : an integer
     */
    public int search(int[] A, int target) {
        if(A == null || A.length == 0) return -1;
        return search(A, target, 0, A.length-1);
    }
    
    public int search(int[] A, int target, int s, int e){
        if(s>e) return -1;
        int m = s+(e-s)/2;
        if(A[m] == target) return m;
        else if(A[m] >= A[s]){
            if(target>=A[s] && target < A[m])
                return search(A, target, s, m-1);
            else return search(A, target, m+1, e);
        }else if(A[m] <= A[s]){
            if(target > A[m] && target <=A[e])
                return search(A, target, m+1, e);
            else return search(A, target, s, m-1);
        }else return -1;
    }
}
