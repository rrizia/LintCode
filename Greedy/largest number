/*
Given a list of non negative integers, arrange them such that they form the largest number.
Given [1, 20, 23, 4, 8], the largest formed number is 8423201.
10, 1 - 101, 110 [normal sorting uses lexicographic sorting, thus 80 and 8 has same weight, but 8 should come after 80]
normal sorting: [1, 10, 10, 11, 12, 13, 13, 13, 14, 16, 16, 16, 17, 18, 2, 22, 22, 23, 24, 25, 25, 26, 26, 27, 28, 28, 28, 28, 3, 30, 30, 31, 32, 33, 35, 35, 38, 39, 41, 43, 47, 49, 49, 50, 50, 50, 51, 52, 53, 54, 55, 55, 55, 56, 57, 57, 61, 61, 63, 63, 66, 67, 69, 74, 75, 76, 76, 78, 8, 80, 80, 80, 80, 81, 81, 84, 85, 85, 85, 85, 87, 87, 88, 89, 89, 9, 9, 90, 90, 91, 92, 92, 94, 95, 96, 96, 97, 97, 98, 99]

with comparator: [10, 10, 11, 1, 12, 13, 13, 13, 14, 16, 16, 16, 17, 18, 22, 22, 2, 23, 24, 25, 25, 26, 26, 27, 28, 28, 28, 28, 30, 30, 31, 32, 33, 3, 35, 35, 38, 39, 41, 43, 47, 49, 49, 50, 50, 50, 51, 52, 53, 54, 55, 55, 55, 56, 57, 57, 61, 61, 63, 63, 66, 67, 69, 74, 75, 76, 76, 78, 80, 80, 80, 80, 81, 81, 84, 85, 85, 85, 85, 87, 87, 8, 88, 89, 89, 90, 90, 91, 92, 92, 94, 95, 96, 96, 97, 97, 98, 9, 99, 9]
*/

public class Solution {
    /**
     *@param num: A list of non negative integers
     *@return: A string
     */
    public String largestNumber(int[] num) {
        if(num == null || num.length == 0) return "";
        
        String[] strs = new String[num.length];
        for(int i = 0; i<num.length; i++){
            strs[i] = String.valueOf(num[i]);
        }
        
        Arrays.sort(strs, new StringComparator());
        StringBuilder sb = new StringBuilder();
        for(int i = strs.length-1; i>=0; i--){
            sb.append(strs[i]);
        }
        
        while(sb.length() > 1 && sb.charAt(0) == '0') sb.deleteCharAt(0);
        return sb.toString();
    }
    
    class StringComparator implements Comparator<String>{
        public int compare(String s1, String s2){
            String lTor = s1+s2;
            String rTol = s2+s1;
            
            return lTor.compareTo(rTol);
        }
    }
}
