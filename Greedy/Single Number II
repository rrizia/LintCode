/*
Given 3*n + 1 numbers, every numbers occurs triple times except one, find it.
Given [1,1,2,3,3,3,2,2,4,1] return 4
*/

public class Solution {
	/**
	 * @param A : An integer array
	 * @return : An integer 
	 */
    public int singleNumberII(int[] A) {
        if(A == null || A.length == 0) return -1;
        int firstTime  = 0;
        int secondTime = 0;
        
        for(int i = 0; i<A.length; i++){
            /* The expression "one & arr[i]" gives the bits that are
           there in both 'ones' and new element from arr[].  We
           add these bits to 'twos' using bitwise OR
 
           Value of 'twos' will be set as 0, 3, 3 and 1 after 1st,
           2nd, 3rd and 4th iterations respectively */
           
            secondTime = secondTime | (firstTime&A[i]);
            /* XOR the new bits with previous 'ones' to get all bits
           appearing odd number of times
 
           Value of 'ones' will be set as 3, 0, 2 and 3 after 1st,
           2nd, 3rd and 4th iterations respectively */
           
            firstTime  = firstTime ^ A[i];
            int mask = ~(firstTime & secondTime);
            secondTime = secondTime & mask;
            firstTime  = firstTime & mask;
        }
        return firstTime;
    }
}
