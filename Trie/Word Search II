public class Solution {
    /**
     * @param board: A list of lists of character
     * @param words: A list of string
     * @return: A list of string
     */
    public ArrayList<String> wordSearchII(char[][] board, ArrayList<String> words){
        Set<String> result = new HashSet<String>();
        Trie trie = new Trie();
        for(String word: words){
            trie.insert(word);
        }
 
        int m=board.length;
        int n=board[0].length;
 
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
               dfs(board, trie, i, j, m, n, "", result);
            }
        }
 
        return new ArrayList<String>(result);
    }
    
    public void dfs(char[][] board, Trie trie, int i, int j, int m, int n, String str, Set<String> result){
        if(i<0 || i>=m || j<0 || j>=n || board[i][j] == '#') return;
        
        str = str+board[i][j];
        
        if(!trie.startsWith(str))
            return;
 
        if(trie.search(str)){
            result.add(str);
        }
        char temp = board[i][j];
        board[i][j] = '#';
        dfs(board, trie, i+1, j, m, n, str, result);
        dfs(board, trie, i-1, j, m, n, str, result);
        dfs(board, trie, i, j+1, m, n, str, result);
        dfs(board, trie, i, j-1, m, n, str, result);
        board[i][j] = temp;
    }
    
    class TrieNode{
        char ch;
        Map<Character, TrieNode> children = new HashMap<Character, TrieNode>();
        boolean leaf = false;;
        
        public TrieNode(){
            
        }
        
        public TrieNode(char c){
            this.ch = c;
        }
    }
    
    class Trie{
        TrieNode root;
        
        public Trie(){
            root = new TrieNode();
        }
        
        public void insert(String word){
            if(word == null || word.length() == 0) return;
            Map<Character, TrieNode> children = root.children;
            
            for(int i = 0; i<word.length(); i++){
                char cur = word.charAt(i);
                TrieNode t;
                if(children.containsKey(cur)){
                    t = children.get(cur);
                }else{
                    t = new TrieNode(cur);
                    children.put(cur, t);
                }
                children = t.children;
                if(i == word.length()-1)
                    t.leaf = true;
            }
        }
        
        public boolean search(String word){
            if(word == null || word.length() == 0) return true;
            TrieNode t = searchWord(word);
            if(t!=null && t.leaf)
                return true;
            return false;
        }
        
        public boolean startsWith(String prefix){
            if(prefix == null || prefix.length() == 0) return true;
            TrieNode t = searchWord(prefix);
            if(t!=null)
                return true;
            return false;
        }
        
        public TrieNode searchWord(String word){
            if(word == null || word.length() == 0) return null;
            TrieNode t = null;
            Map<Character, TrieNode> children = root.children;
            
            for(int i = 0; i<word.length(); i++){
                char cur = word.charAt(i);
                if(children.containsKey(cur)){
                    t = children.get(cur);
                    children = t.children;
                }else{
                    return null;
                }
            }
            return t;
        }
    }
}
