/*
Complexity analysis

Can someone help explain how can building a heap be O(n) complexity?

Inserting an item into a heap is O(log n), and the insert is repeated n/2 times 
(the remainder are leaves, and can't violate the heap property). 
So, this means the complexity should be O(n log n), I would think.
Your analysis is correct. However, it is not tight.

It is not really easy to explain why building a heap is a linear operation, you should better read it.

Great analysis of algorithm can be seen here.

The main idea is that in the build_heap algorithm the actual heapify cost is not O(log n)for all elements.

When heapify is called, the running time depends on how far an element might move down in tree before the process terminates. In other words, it depends on the height of the element in the heap. In the worst case, the element might go down all the way to the leaf level.

Let us count the work done level by level.

At the bottommost level, there are 2^(h)nodes, but we do not call heapify on any of these, so the work is 0. At the next to level there are 2^(h − 1) nodes, and each might move down by 1 level. At the 3rd level from the bottom, there are 2^(h − 2) nodes, and each might move down by 2 levels.

As you can see not all heapify operations are O(log n), this is why you are getting O(n).
*/

/*
Given an integer array, heapify it into a min-heap array.

For a heap array A, A[0] is the root of heap, 
and for each A[i], A[i * 2 + 1] is the left child of A[i] and A[i * 2 + 2] is the right child of A[i].

Example
Given [3,2,1,4,5], return [1,2,3,4,5] or any legal heap array.

Challenge
O(n) time complexity
*/

public class Solution {
    /**
     * @param A: Given an integer array
     * @return: void
     */
    public void heapify(int[] A) {
        if(A == null || A.length == 0) return;
        int parentEnd = (int)Math.floor(A.length/2.0);
        
        for(int i = parentEnd; i>=0; i--){
            boolean isHeap = false;
            int curId = i;
            
            while(!isHeap && curId <= parentEnd){
                int cid1 = curId*2+1;
                int cid2 = curId*2+2;
                
                int minId = curId;
                
                minId = (cid1<A.length && A[cid1] < A[minId])?cid1:minId;
                minId = (cid2<A.length && A[cid2] < A[minId])?cid2:minId;
                
                if(minId == curId){
                    isHeap = true;
                }else if(minId == cid1){
                    int temp = A[cid1];
                    A[cid1] = A[curId];
                    A[curId] = temp;
                    curId = minId;
                }else{
                    int temp = A[cid2];
                    A[cid2] = A[curId];
                    A[curId] = temp;
                    curId = minId;
                }
            }
        }
    }
}
