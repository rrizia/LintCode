/*
Given a string s, cut s into some substrings such that every substring is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of s.

Example
Given s = "aab",

Return 1 since the palindrome partitioning ["aa", "b"] could be produced using 1 cut.
*/
public class Solution {
    /*
    I got wrong anwser initially for "a", it should be 0 and I got 2
    */
    
    /**
     * @param s a string
     * @return an integer
     */
    public int minCut(String s) {
        if(s == null || s.length() == 0) return 0;
        int[] dp = new int[s.length()+1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        //dp[s.length()] = 1;
        dp[s.length()] = 0;//when s.length() == 0 min cut is also 0
        
        boolean[][] isPal = new boolean[s.length()][s.length()];
        for(int i = s.length()-1; i>=0; i--){
            for(int j = i; j<s.length();j++){
                if(s.charAt(i) == s.charAt(j) && (j-i <2 || isPal[i+1][j-1])){
                    isPal[i][j] = true;
                    dp[i] = Math.min(dp[i], 1+dp[j+1]);
                }
            }
        }
        //return dp[0];
        return dp[0]-1;//dp is actually holding how many partitions are there so -1 to get # of cuts
    }
};
