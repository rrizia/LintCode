/*
Given a string S and a string T, count the number of distinct subsequences of T in S.

A subsequence of a string is a new string which is formed from the original string by deleting some 
(can be none) of the characters without disturbing the relative positions of the remaining characters. 
(ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).
Example
Given S = "rabbbit", T = "rabbit", return 3.

Challenge
Do it in O(n2) time and O(n) memory.

O(n2) memory is also acceptable if you do not know how to optimize memory.

/*
    abc, ae, answer 0 [ae does not exist in abc after deleteting 0 or more chars]
    abcd, ac, answer 1[ac is there in abcd]
    rabbbit, rabbit answer is 3 [because we can get rabbit from rabbbit by deleting any 1 of the 3 bs]
    appppple, apple answer is 10 [delete 3 ps from the 5 ps]
    */
*/
/*
Complexity of recursive solution
When all the chars of s is the same as the first char of t
s = "aaaaa", t = "aaaa"
s length = n
t length = m
O(n^m)
*/
public class Solution {
    /**
     * @param S, T: Two string.
     * @return: Count the number of distinct subsequences
     */
    public int numDistinct(String s, String t) {
        if(s.length() == 0){
            return t.length()==0?1:0;
        }
        
        if(t.length() == 0)
            return 1;
        int c = 0;
        
        for(int i = 0; i<s.length(); i++){
            if(s.charAt(i) == t.charAt(0)){
                c+=numDistinct(s.substring(i+1), t.substring(1));
            }
        }
        return c;
    }
}

DP SOLUTION
/*
Two cases for each num[i][j]:

num[i][j] inherits from num[i][j-1]. 
This means overlooking s[j], t[0..i] at least keeps the number of distinct sequences in s[0..j-1]. 
This case finds all sequences of t[0..i] in s[o..j] without s[j].

if t[i]==s[j], 
this means t[i] could be mapped to s[j], we cannot overlook s[j].  
We look at the number of t[0..i-1] in s[0..j-1], and add it to the result. 
This case finds all sequences of t[0..i] in s[o..j] with s[j].

*/
public class Solution {
    /*
    abc, ae, answer 0 [ae does not exist in abc after deleteting 0 or more chars]
    abcd, ac, answer 1[ac is there in abcd]
    rabbbit, rabbit answer is 3 [because we can get rabbit from rabbbit by deleting any 1 of the 3 bs]
    appppple, apple answer is 10 [delete 3 ps from the 5 ps]
    */
    /*
    Attempt2:
Use DP. Okay, first I had no idea how to start, but here is a reference: http://blog.csdn.net/abcbc/article/details/8978146
First of all, Map out the number of existance of T in S in a 2D map:
      0 1 2 3 4 5 6 7
      ---------------
        r a b b b i t
0|    1 1 1 1 1 1 1 1
1|  r 0 1 1 1 1 1 1 1
2|  a 0 0 1 1 1 1 1 1
3|  b 0 0 0 1 2 3 3 3
4|  b 0 0 0 0 1 3 3 3
5|  i 0 0 0 0 0 0 3 3
6|  t 0 0 0 0 0 0 0 3  
Use DP[T][S]. We realize:
1.DP[0][0] == 1; //Both null can be a match
2.DP[0][1 ~ S.length - 1] = 1;//First fow, when T=="", whatever S will have 1 subsequence: ""
3.DP[1 ~ T.length][0] = 0;// First column, when S=="", whatever T will not be subsequence of S == ""
4.When looking at each row and filling out the pixels, we realize when T exist in S[a~b], it will surely exist in S[a~b+1], taht is:
    Step1: DP[i][j] is at least equal to DP[i][j - 1];//DP[i][j] is always based on DP[i][j-1], so DP[i][j] = DP[i][j+1] + something
    */
    /*
    rabbbit, rabbit
    
    rab is a subsequnce of rab and so is a subsequence of rabb [we do not care whether t[i] == s[j] or not] dp[i][j] = dp[i][j-1];
    now if t[i] == s[j]
    dp[i] [j] +=dp[i-1][j-1]
    */
    
    /**
     * @param S, T: Two string.
     * @return: Count the number of distinct subsequences
     */
    public int numDistinct(String s, String t) {
        if(s.length() == 0 && t.length() == 0) return 1;
        else if(s.length() == 0) return 0;
        else if(t.length() == 0) return 1;
        
        int m = t.length();
        int n = s.length();
        int[][] dp = new int[m+1][n+1];
        
        for(int i = 0; i<=m; i++)
            dp[i][0] = 0;
        for(int j = 0; j<=n; j++)
            dp[0][j] = 1;
        
        for(int i = 1; i<=m; i++){
            for(int j = 1; j<=n; j++){
                dp[i][j] = dp[i][j-1];
                if(s.charAt(j-1) == t.charAt(i-1))
                    dp[i][j]+=dp[i-1][j-1];
            }
        }
        return dp[m][n];
    }
}
