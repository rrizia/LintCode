public class Solution {
    /**
     * Determine whether s3 is formed by interleaving of s1 and s2.
     * @param s1, s2, s3: As description.
     * @return: true or false.
     */
    public boolean isInterleave(String s1, String s2, String s3) {
        if(s1 == null && s2 == null && s3 == null) return true;
        else if(s1.length() == 0 && s2.length() == 0 && s3.length() == 0) return true;
        else if(s1.length()+s2.length() != s3.length()) return false;
        return isInterleaveH(s1, s2, s3, 0, 0, 0);
    }
    
    public boolean isInterleaveH(String s1, String s2, String s3, int id1, int id2, int id3){
        if(id1 == s1.length()) return s2.substring(id2).equals(s3.substring(id3));
        else if(id2 == s2.length()) return s1.substring(id1).equals(s3.substring(id3));
        else if(s3.charAt(id3) == s1.charAt(id1) && s3.charAt(id3) == s2.charAt(id2)){
            return isInterleaveH(s1, s2, s3, id1+1, id2, id3+1)||isInterleaveH(s1, s2, s3, id1, id2+1, id3+1);
        }else if(s3.charAt(id3) == s1.charAt(id1)){
            return isInterleaveH(s1, s2, s3, id1+1, id2, id3+1);
        }else if(s3.charAt(id3) == s2.charAt(id2)){
            return isInterleaveH(s1, s2, s3, id1, id2+1, id3+1);
        }else return false;
    }
}


DP Approach

public class Solution {
    /**
     * Determine whether s3 is formed by interleaving of s1 and s2.
     * @param s1, s2, s3: As description.
     * @return: true or false.
     */
    public boolean isInterleave(String s1, String s2, String s3) {
        if(s1.length() + s2.length() != s3.length()) return false;
        
        int m = s1.length();
        int n = s2.length();
        
        boolean[][] dp = new boolean[m+1][n+1];
        dp[0][0] = true;
        
        for(int row = 1; row<=m; row++){
            dp[row][0] = dp[row-1][0] && (s1.charAt(row-1) == s3.charAt(row-1));
        }
        
        for(int col = 1; col<=n; col++){
            dp[0][col] = dp[0][col-1] && (s2.charAt(col-1) == s3.charAt(col-1));
        }
        
        for(int i = 1; i<=m; i++){
            for(int j = 1; j<=n; j++){
                dp[i][j] = (dp[i-1][j] && (s1.charAt(i-1) == s3.charAt(i+j-1)))|| (dp[i][j-1] && (s2.charAt(j-1) == s3.charAt(i+j-1)));
            }
        }
        return dp[m][n];
    }
}
