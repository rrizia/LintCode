DP

public class Solution {
    /**
     * @param A, B: Two string.
     * @return: the length of the longest common substring.
     */
    public int longestCommonSubstring(String A, String B) {
        if(A == null || B == null ) return 0;
        else if(A.length() == 0 || B.length() == 0) return 0;
        else if(A.equals(B)) return A.length();
        
        int m = A.length();
        int n = B.length();
        
        int[][] dp = new int[m+1][n+1];
        for(int i = 0; i<=m; i++){
            dp[i][0] = 0;
        }
        
        for(int j = 0; j<=n; j++){
            dp[0][j] = 0;
        }
        
        for(int i = 1; i<=m; i++){
            for(int j = 1; j<=n; j++){
                if(A.charAt(i-1) == B.charAt(j-1)){
                    dp[i][j] = 1+dp[i-1][j-1];
                }else{
                    dp[i][j] = 0;
                }
            }
        }
        
        int result = 0;
        for(int i = 0; i<=m; i++){
            for(int j = 0; j<=n; j++){
                result = Math.max(result, dp[i][j]);
            }
        }
        return result;
    }
}


NAIVE:

public class Solution {
    /**
     * @param A, B: Two string.
     * @return: the length of the longest common substring.
     */
    public int longestCommonSubstring(String A, String B) {
        if(A == null || B == null || A.length() == 0 || B.length() == 0) return 0;
        HashSet<String> map = new HashSet<String>();
        
        for(int i = 0; i<A.length(); i++){
            for(int j = i+1; j<=A.length(); j++){
                String cur = A.substring(i, j);
                if(!map.contains(cur)){
                    map.add(cur);
                }
            }
        }
        
        int maxLen = 0;
        for(int i = 0; i<B.length(); i++){
            for(int j = i+1; j<=B.length(); j++){
                String cur = B.substring(i, j);
                if(map.contains(cur)){
                    maxLen = Math.max(maxLen, cur.length());
                }
            }
        }
        return maxLen;
    }
}
