/*
Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in ZigZag-order.
Given a matrix:

[
  [1, 2,  3,  4],
  [5, 6,  7,  8],
  [9,10, 11, 12]
]
return [1, 2, 5, 9, 6, 3, 4, 7, 10, 11, 8, 12]
*/

public class Solution {
    /**
     * @param matrix: a matrix of integers
     * @return: an array of integers
     */ 
    public int[] printZMatrix(int[][] matrix) {
        
        if(matrix == null) return null;
        int m = matrix.length;
        if(m == 0) return new int[0];
        int n = matrix[0].length;
        
        int[] result = new int[m*n];
        
        int layers = Math.min(m, n);
        List<List<Integer>> lists= new ArrayList<List<Integer>>();
        for(int i = 0; i<m+n-1; i++){
            List<Integer> l = new ArrayList<Integer>();
            lists.add(l);
        }
        
        
        for(int i = 0; i<layers; i++){
            int k = i;
            for(int j = 0; j<n-1-i; j++){
                lists.get(k++).add(matrix[i][j]);
            }
            
            for(int l = i; l<m; l++){
                lists.get(k++).add(matrix[l][n-1-i]);
            }
        }
        
        
        for(int i = 0; i<m+n-1; i+=2){
            Collections.reverse(lists.get(i));
        }
        
        int index = 0;
        for(List<Integer> l: lists){
            for(int i:l){
                result[index++] = i;
            }
        }
        return result;
    }
}
