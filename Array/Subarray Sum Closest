/*
Given an integer array, find a subarray with sum closest to zero. Return the indexes of the first number and last number.
Given [-3, 1, 1, -3, 5], return [0, 2], [1, 3], [1, 1], [2, 2] or [0, 4].
*/
public class Solution {
    /**
     * @param nums: A list of integers
     * @return: A list of integers includes the index of the first number 
     *          and the index of the last number
     */
    class Entry implements Comparable<Entry>{
        int sum;
        int index;
        
        public Entry(int s, int i){
            sum = s;
            index = i;
        }
        
        public int compareTo(Entry e){
            return this.sum-e.sum;
        }
    }
    
    public int[] subarraySumClosest(int[] nums) {
        int[] result = new int[2];
        if(nums == null || nums.length == 0) return nums;
        
        Entry[] entries = new Entry[nums.length+1];
        entries[0] = new Entry(0, -1);
        int sum = 0;
        
        for(int i = 0; i<nums.length; i++){
            sum+=nums[i];
            entries[i+1] = new Entry(sum, i); 
        }
        Arrays.sort(entries);
        
        int min = Math.abs(entries[0].sum - entries[1].sum);
        int start = Math.min(entries[0].index, entries[1].index)+1;
        int end = Math.max(entries[0].index, entries[1].index);
        
        for(int i = 1; i<entries.length-1; i++){
            int diff = Math.abs(entries[i].sum-entries[i+1].sum);
            if(diff<min){
                min = diff;
                start = Math.min(entries[i].index, entries[i+1].index)+1;
                end = Math.max(entries[i].index, entries[i+1].index);
            }
        }
        result[0] = start;
        result[1] = end;
        return result;
    }
}
