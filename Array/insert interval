/*
Given a non-overlapping interval list which is sorted by start point.

Insert a new interval into it, make sure the list is still in order and non-overlapping (merge intervals if necessary).

Insert [2, 5] into [[1,2], [5,9]], we get [[1,9]].

Insert [3, 4] into [[1,2], [5,9]], we get [[1,2], [3,4], [5,9]].
*/

/**
 * Definition of Interval:
 * public classs Interval {
 *     int start, end;
 *     Interval(int start, int end) {
 *         this.start = start;
 *         this.end = end;
 *     }
 */

class Solution {
    /**
     * Insert newInterval into intervals.
     * @param intervals: Sorted interval list.
     * @param newInterval: A new interval.
     * @return: A new sorted interval list.
     */
    public ArrayList<Interval> insert(ArrayList<Interval> intervals, Interval newInterval) {
        ArrayList<Interval> result = new ArrayList<Interval>();
        insertInterval(intervals, newInterval);
        mergeInterval(intervals, result);
        return result;
    }
    
    public void insertInterval(ArrayList<Interval> intervals, Interval newInterval){
        if(intervals.size() == 0) intervals.add(newInterval);
        else if(newInterval.start<=intervals.get(0).start) intervals.add(0, newInterval);
        else if(newInterval.start>=intervals.get(intervals.size()-1).start) intervals.add(newInterval);
        else{
            Interval prev = intervals.get(0);
            for(int i = 1; i<intervals.size(); i++){
                Interval cur = intervals.get(i);
                if(newInterval.start>=prev.start && newInterval.start<=cur.start){
                    intervals.add(i, newInterval);
                    break;
                }
                prev = cur;
            }
        }
    }
    
    public void mergeInterval(ArrayList<Interval> intervals, ArrayList<Interval> result){
        if(intervals == null || intervals.size() == 0) return;
        Interval prev = intervals.get(0);
        for(int i = 1; i<intervals.size(); i++){
            Interval cur = intervals.get(i);
            if(prev.end>= cur.start){
                Interval temp = new Interval(prev.start, Math.max(prev.end, cur.end));
                prev = temp;
            }else{
                result.add(prev);
                prev = cur;
            }
        }
        result.add(prev);
    }
}
