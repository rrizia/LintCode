
/*

Give an integer arrayï¼Œfind the longest increasing continuous subsequence in this array.

An increasing continuous subsequence:

Can be from right to left or from left to right.
Indices of the integers in the subsequence should be continuous.
For [5, 4, 2, 1, 3], the LICS is [5, 4, 2, 1], return 4.

For [5, 1, 2, 3, 4], the LICS is [1, 2, 3, 4], return 4.
*/
public class Solution {
    /**
     * @param A an array of Integer
     * @return  an integer
     */
    /*
    The numbers in the subsequence are increasing
    They can increase from left to right or from right to left
    That is the reason we need to traverse through the array once from left to right and once from right to left
    when going from left to right I need to see if it is increasing
    when going from right to left I need to see increasing too, means a[cur]<a[cur-1]
    */
    public int longestIncreasingContinuousSubsequence(int[] A) {
        if(A == null || A.length == 0) return 0;
        else if(A.length == 1) return 1;
        else{
            int max = 0;
            int count = 1;
            for(int i = 1; i<A.length; i++){
                if(A[i] > A[i-1])
                    count++;
                else
                    count = 1;
                max = Math.max(max, count);
            }
            
            count = 1;
            for(int i = A.length-1; i>0; i--){
                if(A[i] < A[i-1])
                    count++;
                else count = 1;
                max = Math.max(max, count);
            }
            return max;
        }
    }
}
