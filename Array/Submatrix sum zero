public class Solution {
    /**
     * @param matrix an integer matrix
     * @return the coordinate of the left-up and right-down number
     */
    public int[][] submatrixSum(int[][] matrix) {
        if(matrix == null) return null;
        int[][] result = new int[2][2];
        int m = matrix.length;
        if(m == 0) return result;
        int n = matrix[0].length;
        
        int[][] sum = new int[m+1][n+1];
        
        for(int col = 0; col<=n; col++)
            sum[0][col] = 0;
        for(int row = 0; row<=m; row++)
            sum[row][0] = 0;
        // pre-compute: sum[i][j] = sum of submatrix [(0, 0), (i, j)]
        for(int row = 0; row<m; row++){
            for(int col = 0; col<n; col++){
                sum[row+1][col+1] = matrix[row][col]+sum[row+1][col]+sum[row][col+1] - sum[row][col];
            }
        }
        
        for(int r1 = 0; r1<m; r1++){
            for(int r2 = r1+1; r2<=m; r2++){
                Map<Integer, Integer> map = new HashMap<Integer, Integer>();
                for(int col = 0; col<=n; col++){
                    int diff = sum[r2][col] - sum[r1][col];
                    if(map.containsKey(diff)){
                        result[0][0] = r1;
                        result[0][1] = map.get(diff);
                        result[1][0] = r2-1;
                        result[1][1] = col-1;
                        return result;
                    }else{
                        map.put(diff, col);
                    }
                }
            }
        }
        return result;
    }
}
