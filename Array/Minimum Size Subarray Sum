public class Solution {
    /**
     * @param nums: an array of integers
     * @param s: an integer
     * @return: an integer representing the minimum size of subarray
     */
    public int minimumSize(int[] nums, int s) {
        if(nums == null || nums.length == 0) return -1;
        int min = -1;
        int start = 0;
        int sum = 0;
        
        for(int end = 0; end<nums.length; end++){
            sum+=nums[end];
            if(sum >= s){
                if(start == end){
                    min = 1;
                    break;
                }else{
                    while(start<end && sum - nums[start] >= s){
                        sum-=nums[start];
                        start++;
                    }
                    min = (min==-1)? end-start+1: Math.min(min, end-start+1);
                }
            }
        }
        return min;
    }
}


//from leetcode

public class Solution {
    public int minSubArrayLen(int s, int[] nums) {
        if(nums == null || nums.length == 0 ) return 0;
        int left = 0;
        int right = 0;
        int minLen = nums.length+1;
        int sum = 0;
        
        while(right<nums.length){
            sum+=nums[right];
            while(sum>=s){
                minLen = Math.min(minLen, right-left+1);
                sum-=nums[left];
                left++;
            }
            right++;
        }
        
        return (minLen == nums.length+1)?0:minLen;
    }
}
