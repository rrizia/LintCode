/*
Given an unsorted array nums, reorder it such that

nums[0] < nums[1] > nums[2] < nums[3]....

Example
Given nums = [1, 5, 1, 1, 6, 4], one possible answer is [1, 4, 1, 5, 1, 6].

Given nums = [1, 3, 2, 2, 3, 1], one possible answer is [2, 3, 1, 3, 1, 2].

Challenge
Can you do it in O(n) time and/or in-place with O(1) extra space?
*/
public class Solution {
    /**
     * @param nums a list of integer
     * @return void
     */
    public void wiggleSort(int[] nums) {
        if(nums == null || nums.length <=1) return;
        Arrays.sort(nums);
        /*
        when length even like 6, s will be 3, but we want it to be 2 as 2 is exactly half index
        */
        int n = nums.length;
        int s = (n & 1) == 0? ((nums.length >> 1) - 1): (nums.length >> 1);
        int t = nums.length-1;
        
        int[] temp = new int[nums.length];
        for(int i = 0; i<nums.length; i++){
            //System.out.println(s+" "+nums[s]+" "+t+" "+nums[t]);
            temp[i] = (i & 1) == 0?nums[s--]:nums[t--];
        }
        
        for(int i = 0; i<nums.length; i++){
            nums[i] = temp[i];
        }
    }
}
