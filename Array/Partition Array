/*
Given an array nums of integers and an int k, partition the array (i.e move the elements in "nums") such that:

All elements < k are moved to the left
All elements >= k are moved to the right
Return the partitioning index, i.e the first index i nums[i] >= k.
If nums = [3,2,2,1] and k=2, a valid answer is 1.
*/

public class Solution {
	/** 
     *@param nums: The integer array you should partition
     *@param k: As description
     *return: The index after partition
     */
    public int partitionArray(int[] nums, int k) {
	    if(nums == null || nums.length == 0) return 0;
	    int l = 0;
	    int cur = 0;
	    int h = nums.length-1;
	    
	    while(cur<=h){
	        if(nums[cur] < k){
	            int temp = nums[cur];
	            nums[cur++] = nums[l];
	            nums[l++] = temp;
	        }else{
	            int temp = nums[cur];
	            nums[cur] = nums[h];
	            nums[h--] = temp;
	        }
	    }
	    
	    return cur;
    }
}


public int partitionArray(int[] nums, int k) {
	    if(nums == null || nums.length == 0) return 0;
	    int lower = 0;
	    int equal = 0;
	    int higher = nums.length-1;
	    
	    while(equal<=higher){
	        if(nums[equal] < k){
	            int temp = nums[equal];
	            nums[equal++] = nums[lower];
	            nums[lower++] = temp;
	        }else if(nums[equal] == k){
	            equal++;
	        }else{
	            int temp = nums[equal];
	            nums[equal] = nums[higher];
	            nums[higher--] = temp;
	        }
	    }
	    
	    int i = 0;
	    while(i<nums.length && nums[i] < k){
	        i++;
	    }
	    return i;
    }
