/**
 * Definition of Interval:
 * public class Interval {
 *     int start, end;
 *     Interval(int start, int end) {
 *         this.start = start;
 *         this.end = end;
 *     }
 */

class Solution {
    /**
     * @param intervals: Sorted interval list.
     * @return: A new sorted interval list.
     */
    class IntervalComparator implements Comparator<Interval>{
        public int compare(Interval i1, Interval i2){
            return i1.start-i2.start;
        }
    }
    public List<Interval> merge(List<Interval> intervals) {
        List<Interval> result = new ArrayList<Interval>();
        if(intervals == null || intervals.size() == 0) return result;
        Collections.sort(intervals, new IntervalComparator());
        Interval prev= intervals.get(0);
        for(int i = 1; i<intervals.size(); i++){
            Interval cur = intervals.get(i);
            if(prev.end >= cur.start){
                Interval temp = new Interval(prev.start, Math.max(prev.end, cur.end));
                prev = temp;
            }else{
                result.add(prev);
                prev = cur;
            }
        }
        result.add(prev);
        return result;
    }

}

//in place

private void mergeInterval(List<Interval> l){
        Interval prev = l.get(0);
        for(int i = 1; i<l.size(); i++){
            Interval cur = l.get(i);
            if(prev.end>=cur.start){
                Interval temp = new Interval(prev.start, Math.max(prev.end, cur.end));
                l.add(i, temp);
                l.remove(prev);
                l.remove(cur);
                i--;
                prev = temp;
            }else{
                
                prev = cur;
            }
        }
    }
