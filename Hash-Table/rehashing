
/*
The size of the hash table is not determinate at the very beginning. 
If the total size of keys is too large (e.g. size >= capacity / 10), 
we should double the size of the hash table and rehash every keys. 
Say you have a hash table looks like below:

size=3, capacity=4

[null, 21, 14, null]
       ↓    ↓
       9   null
       ↓
      null
The hash function is:

int hashcode(int key, int capacity) {
    return key % capacity;
}
here we have three numbers, 9, 14 and 21, where 21 and 9 share the same position as they all have the same hashcode 1 (21 % 4 = 9 % 4 = 1). We store them in the hash table by linked list.

rehashing this hash table, double the capacity, you will get:

size=3, capacity=8

index:   0    1    2    3     4    5    6   7
hash : [null, 9, null, null, null, 21, 14, null]
Given the original hash table, return the new hash table after rehashing .
*/


/**
 * Definition for ListNode
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param hashTable: A list of The first node of linked list
     * @return: A list of The first node of linked list which have twice size
     */    
    public ListNode[] rehashing(ListNode[] hT) {
        if(hT == null) return null;
        int capacity = hT.length * 2;
        ListNode[] result = new ListNode[capacity];
        for(ListNode l: hT){
            while(l!=null){
                ListNode temp = l.next;
                l.next = null;
                int code = hashcode(l.val, capacity);
                ListNode cur = result[code];
                if(cur == null){
                    cur = l;
                }else{
                    ListNode n = cur;
                    while(n.next!=null)
                        n = n.next;
                    n.next = l;
                }
                result[code] = cur;
                l = temp;
            }
        }
        return result;
    }
    
    public int hashcode(int key, int capacity) {
        return key<0?(capacity - Math.abs(key) % capacity): key%capacity;
    }
};
