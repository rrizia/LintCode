/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    /**
     * @param head a ListNode
     * @oaram v1 an integer
     * @param v2 an integer
     * @return a new head of singly-linked list
     */
     
    /*
    Handle the cases for which prev == null/the two nodes are adjacent/ the two nodes are not adjacent
    */
    public ListNode[] searchNode(ListNode h, int v){
        ListNode[] result = new ListNode[2];
        result[0] = null;
        result[1] = h;
        while(result[1] != null){
            if(result[1].val == v)
                return result;
            result[0] = result[1];
            result[1] = result[1].next;
        }
        return result;
    }
    public ListNode swapNodes(ListNode head, int v1, int v2) {
        if(head == null || head.next == null) return head;
        
        ListNode[] n1 = searchNode(head, v1);
        ListNode[] n2 = searchNode(head, v2);
        
        if(n1[1] == null || n2[1] == null) return head;
        
        if(n1[1].next == n2[1]){
            ListNode temp = n2[1].next;
            n2[1].next = null;
            
            if(n1[0] != null)
                n1[0].next = null;
            n1[1].next = temp;
            n2[1].next = n1[1];
            
            if(n1[0]!=null){
                n1[0].next = n2[1];
                return head;
            }else{
                return n2[1];
            }
        }else if(n2[1].next == n1[1]){
                ListNode temp = n1[1].next;
                n1[1].next = null;
                
                if(n2[0] != null)
                    n2[0].next = null;
                n2[1].next = temp;
                n1[1].next = n2[1];
                
                if(n2[0]!=null){
                    n2[0].next = n1[1];
                    return head;
                }else{
                    return n1[1];
                }
        }else{
        
                ListNode t1 = n1[1].next;
                ListNode t2 = n2[1].next;
                
                n1[1].next = null;
                n2[1].next = null;
                
                if(n1[0]!=null)
                    n1[0].next = null;
                if(n2[0]!=null)
                    n2[0].next = null;
                n1[1].next = t2;
                n2[1].next = t1;
                
                if(n1[0]!=null)
                    n1[0].next = n2[1];
                if(n2[0]!=null)
                    n2[0].next = n1[1];
                
                if(n1[0] == null)
                    return n2[1];
                else if(n2[0] == null)
                    return n1[1];
                else return head;
        }
    }
}
