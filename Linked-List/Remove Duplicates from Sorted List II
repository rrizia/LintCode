/*
Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.
Given 1->2->3->3->4->4->5, return 1->2->5.
Given 1->1->1->2->3, return 2->3.
*/


/**
 * Definition for ListNode
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param ListNode head is the head of the linked list
     * @return: ListNode head of the linked list
     */
    public static ListNode deleteDuplicates(ListNode head) {
        if(head == null || head.next == null) return head;
        
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        ListNode cur = head;
        while(cur!=null){
            if(!map.containsKey(cur.val)){
                map.put(cur.val, 1);
            }else{
                map.put(cur.val, map.get(cur.val)+1);
            }
            cur = cur.next;
        }
        
        cur = head;
        ListNode prev = null;
        ListNode ret = head;
        
        while(cur!=null){
            if(map.get(cur.val) > 1){
                if(prev == null){
                    ret = ret.next;
                }else{
                    prev.next = cur.next;
                }
            }else{
                prev = cur;
            }
            cur = cur.next;
        }
        return ret;
    }
}
