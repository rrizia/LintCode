/*
Given a linked list, remove the nth node from the end of list and return its head.

Given linked list: 1->2->3->4->5->null, and n = 2.

After removing the second node from the end, the linked list becomes 1->2->3->5->null.
*/

/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 */ 
public class Solution {
    /**
     * @param head: The first node of linked list.
     * @param n: An integer.
     * @return: The head of linked list.
     */
    ListNode removeNthFromEnd(ListNode head, int n) {
        if(head == null) return head;
        int c = 1;
        ListNode f = head;
        
        while(c<n){
            f = f.next;
            c++;
        }
        
        ListNode b = head;
        ListNode prev = null;
        
        while(f.next!=null){
            f = f.next;
            prev = b;
            b = b.next;
        }
        
        if(prev == null)
            return head.next;
        else{
            prev.next = b.next;
            return head;
        }
    }
}
