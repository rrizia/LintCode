/*
Write a program to find the node at which the intersection of two singly linked lists begins.
Notice

If the two linked lists have no intersection at all, return null.
The linked lists must retain their original structure after the function returns.
You may assume there are no cycles anywhere in the entire linked structure.

The following two linked lists:

A:          a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗            
B:     b1 → b2 → b3
begin to intersect at node c1.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;      
 *     }
 * }
 */
public class Solution {
    /**
     * @param headA: the first list
     * @param headB: the second list
     * @return: a ListNode 
     */
    public int countNodes(ListNode l){
        int c = 0;
        while(l!=null){
            c++;
            l = l.next;
        }
        return c;
    }
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA == null || headB == null) return null;
        int c1 = countNodes(headA);
        int c2 = countNodes(headB);
        
        int diff = Math.abs(c1-c2);
        int c = 0;
        if(c1>c2){
            while(c<diff){
                headA = headA.next;
                c++;
            }
        }else{
             while(c<diff){
                headB = headB.next;
                c++;
            }
        }
        
        while(headA!= null && headB != null){
            if(headA == headB)
                return headA;
            headA = headA.next;
            headB = headB.next;
        }
        return null;
    }  
}
