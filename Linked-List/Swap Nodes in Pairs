/*
Given a linked list, swap every two adjacent nodes and return its head.
Given 1->2->3->4, you should return the list as 2->1->4->3.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    /**
     * @param head a ListNode
     * @return a ListNode
     */
    public ListNode swapPairs(ListNode head) {
       if(head == null || head.next == null) return head;
       ListNode l1 = head;
       ListNode l2 = head.next;
       ListNode temp = l2.next;
       
       l2.next = l1;
       l1.next = swapPairs(temp);
       return l2;
    }
}

public ListNode swapPairs(ListNode head) {
       if(head == null || head.next == null) return head;
       ListNode prev = null;
       ListNode cur = head;
       ListNode ret = head.next;
       
       while(cur!=null && cur.next!=null){
           ListNode l1= cur;
           ListNode l2 = cur.next;
           ListNode temp = l2.next;
           
           l1.next = null;
           l2.next = l1;
           if(prev!=null)
                prev.next = l2;
           prev = l1;
           cur = temp;
       }
       if(cur!=null)
            prev.next = cur;
       return ret;    
    }
    
    public ListNode swapPairs(ListNode head) {
        if(head == null || head.next == null) return head;
           
        ListNode ret = head.next;
        ListNode prev = null;
           
        while(head!=null){
            ListNode temp = null;
            
            ListNode n1 = head;
            ListNode n2 = head.next;
            
            if(n2!=null)
                temp = n2.next;
                
            n1.next = null;
            if(n2!=null)
                n2.next = n1;
            
            if(prev!=null)
                prev.next = (n2==null)?n1:n2;
            prev = n1;
            head = temp;
        }
        return ret;
    }
